ขอโทษที่ขาดแบบเต็มในคำตอบก่อนหน้านี้ นี่คือโค้ด Arduino ที่ใช้ millis() เพื่อควบคุมการเปลี่ยนค่า setpoint ตามที่คุณต้องการ:

```cpp
#include <PID_v1.h>

int peltierPin = 9;
int tempPin = A0;

double setpoint1 = 50;
double setpoint2 = 45;
double setpoint3 = 49;
double currentSetpoint = setpoint1;

double Kp = 2;
double Ki = 5;
double Kd = 1;
PID myPID(&temp, &output, &currentSetpoint, Kp, Ki, Kd, DIRECT);

unsigned long previousMillis = 0;
const long setpoint1Interval = 30000; // 30 วินาที
const long setpoint2Interval = 40000; // 40 วินาที
const long setpoint3Interval = 50000; // 50 วินาที

void setup() {
  pinMode(peltierPin, OUTPUT);
  myPID.SetMode(AUTOMATIC);
}

void loop() {
  int temp = analogRead(tempPin);
  double celsius = (temp - 20) / 1.5;

  unsigned long currentMillis = millis();

  if (celsius >= currentSetpoint) {
    analogWrite(peltierPin, 0);

    if (currentSetpoint == setpoint1 && currentMillis - previousMillis >= setpoint1Interval) {
      currentSetpoint = setpoint2;
      previousMillis = currentMillis;
      myPID.SetSetpoint(currentSetpoint);
    } else if (currentSetpoint == setpoint2 && currentMillis - previousMillis >= setpoint2Interval) {
      currentSetpoint = setpoint3;
      previousMillis = currentMillis;
      myPID.SetSetpoint(currentSetpoint);
    } else if (currentSetpoint == setpoint3 && currentMillis - previousMillis >= setpoint3Interval) {
      currentSetpoint = setpoint1;
      previousMillis = currentMillis;
      myPID.SetSetpoint(currentSetpoint);
    }
  } else {
    myPID.Compute();
    int outputValue = constrain(output, 0, 255);
    analogWrite(peltierPin, outputValue);
  }

  delay(1000);
}
```

ในโค้ดนี้, เราใช้ millis() เพื่อตรวจสอบเวลาและเปลี่ยนค่า setpoint ตามที่คุณต้องการ (ทุก 30 วินาที, 40 วินาที, และ 50 วินาที) และตั้งค่า previousMillis เพื่อเก็บเวลาของการเปลี่ยนค่า setpoint ล่าสุดในการควบคุมเวลาการเปลี่ยน setpoint.