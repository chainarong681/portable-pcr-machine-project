#include <PID_v1.h>
#include <U8glib.h>
#include <SPI.h>
#include "Adafruit_MAX31855.h"

#define MAXDO   9
#define MAXCS   10
#define MAXCLK  11

Adafruit_MAX31855 thermocouple(MAXCLK, MAXCS, MAXDO);
int peltierPin = 3;
int fanPin = 8;

double WARM_TEMP = 40.0;
double RT_TEMP = 50.0;
double INITIAL_DENATURE_TEMP = 94.0;
double DENATURE_TEMP = 94.0;
double ANNEALING_TEMP = 58.0;
double EXTENSION_TEMP = 68.0;
double FINAL_EXTENSION_TEMP = 68.0;

int WARM_TEMP_TIME = 120;
int RT_TEMP_TIME = 900;
int INITIAL_DENATURE_TIME = 120;
int DENATURE_TEMP_TIME = 15;
int ANNEALING_TEMP_TIME = 45;
int EXTENSION_TEMP_TIME = 45;
int COOLING_TEMP_TIME = 420;

int NUMBER_CYCLE = 0;
int SET_CYCLE = 35;
int STAGE = 1;

int measurementsCount = 0;
bool STATUS_CHECK = false;

unsigned long period = 1000;
unsigned long last_time = 0;
int TIME_COUNT = 0;
int TIMER_STEP = 0;
int TIME_CHANGE;

double Input, Output, Setpoint;
double Kp = 30;
double Ki = 3;
double Kd = 1;
PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, P_ON_M, DIRECT);

U8GLIB_ST7920_128X64_1X u8g(6, 5, 4, 7);

void setup() {
  pinMode(peltierPin, OUTPUT);
  pinMode(fanPin, OUTPUT);
  u8g.begin();
  myPID.SetMode(AUTOMATIC);
  thermocouple.begin();
  Serial.begin(9600);
  Setpoint = WARM_TEMP;
  TIME_CHANGE = 0;
}

void loop() {
  float max31855temp = thermocouple.readCelsius();
  if (!isnan(max31855temp)) {
    Input = max31855temp;
  }

  unsigned long periodTemp = 1000;
  static unsigned long last_timeTemp = 0;
  if (millis() - last_timeTemp > periodTemp) {
    last_timeTemp = millis();
    Serial.println(Input);
  }

  myPID.Compute();

  u8g.firstPage();
  do {
    //... (รายละเอียดการแสดงผลบน LCD)

  } while (u8g.nextPage());

  instrumentRun();
  stadyState();
}

void instrumentRun() {
  switch (STAGE) {
    case 1:
      runPCRStage(WARM_TEMP, WARM_TEMP_TIME, 2);
      break;
    case 2:
      runPCRStage(RT_TEMP, RT_TEMP_TIME, 3);
      break;
    case 3:
      runPCRStage(INITIAL_DENATURE_TEMP, INITIAL_DENATURE_TIME, 4);
      break;
    case 4:
      runPCRStage(DENATURE_TEMP, DENATURE_TEMP_TIME, 5);
      break;
    case 5:
      runPCRStage(ANNEALING_TEMP, ANNEALING_TEMP_TIME, 6);
      break;
    case 6:
      runPCRStage(EXTENSION_TEMP, EXTENSION_TEMP_TIME, 4);
      break;
    case 7:
      runPCRStage(FINAL_EXTENSION_TEMP, COOLING_TEMP_TIME, 0);
      break;
  }
}

void runPCRStage(double setpoint, int time, int nextStage) {
  Setpoint = setpoint;
  TIMER_STEP = time;
  runInstrument();
  stadyState();

  if (STATUS_CHECK) {
    timer();
    if (TIME_CHANGE == 1) {
      STATUS_CHECK = false;
      STAGE = nextStage;
      TIME_CHANGE = 0;
    }
  }
}

void runInstrument() {
  if ((Input >= Setpoint) || (Input >= 99)) {
    analogWrite(peltierPin, 0);
    analogWrite(fanPin, 40);
  } else {
    analogWrite(peltierPin, Output);
    analogWrite(fanPin, 128);
  }
}

void stadyState() {
  static unsigned long previousStadyState = 0;
  const long intervalStadyState = 1000;
  unsigned long currentMillisStadyState = millis();

  if (Input <= Setpoint + 0.5 && Input >= Setpoint - 0.5) {
    if (currentMillisStadyState - previousStadyState >= intervalStadyState) {
      measurementsCount++;
      previousStadyState = currentMillisStadyState;

      if (measurementsCount >= 5) {
        STATUS_CHECK = true;
        measurementsCount = 0;
      }
    }
  }
}

void timer() {
  if (millis() - last_time > period) {
    TIME_COUNT++;
    last_time = millis();
    if (TIME_COUNT >= TIMER_STEP) {
      TIME_COUNT = 0;
      TIME_CHANGE = 1;
    }
  }
}
